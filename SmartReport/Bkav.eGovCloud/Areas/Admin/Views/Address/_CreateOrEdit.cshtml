@model AddressModel
@{
    var address = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
    var allUsers = ViewBag.AllUsers as string;
    var allGroupName = ViewBag.AllGroupName as string;
    var allDepartments = ViewBag.AllDepartments as string;
    var allChildren = ViewBag.AllChildren as string;
}
@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.AddressId)
<style>
    .up {
        bottom: 100% !important;
        top: auto !important;
    }

    .input-edit {
        margin-bottom: 0px !important;
        width: 100% !important;
    }

    .table > tbody > tr > td {
        vertical-align: middle;
    }
</style>

<script src="/Scripts/bkav.egov/libs/backbone/backbone-1.3.3.js"></script>
<script src="/Scripts/bkav.egov/libs/jquery/jQuery.tmpl.min.js"></script>
@*<script src="@Url.Content("~/Scripts/bkav.egov/libs/jquery/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/bkav.egov/libs/jquery/jquery.validate.unobtrusive.min.js")"></script>*@

<table>
    <tr>
        <td style="width: 25%">
            @Html.LabelFor(model => model.EdocId):
        </td>
        <td>
            @Html.TextBoxFor(model => model.EdocId)
            @Html.ValidationMessageFor(model => model.EdocId)
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelRequireFor(model => model.Name):
        </td>
        <td>
            @Html.TextBoxFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </td>
    </tr>
    <tr style="display:none">
        <td>
            @Html.LabelFor(model => model.AddressString):
        </td>
        <td>
            @Html.TextBoxFor(model => model.AddressString)
            @Html.ValidationMessageFor(model => model.AddressString)
        </td>
    </tr>
    <tr style="">
        <td>
            @Html.LabelFor(model => model.Email):
        </td>
        <td>
            @Html.TextBoxFor(model => model.Email)
            @Html.ValidationMessageFor(model => model.Email)
        </td>
    </tr>
    <tr style="display:none">
        <td>
            @Html.LabelFor(model => model.Phone):
        </td>
        <td>
            @Html.TextBoxFor(model => model.Phone)
            @Html.ValidationMessageFor(model => model.Phone)
        </td>
    </tr>
    <tr style="display:none">
        <td>
            @Html.LabelFor(model => model.PhoneExt):
        </td>
        <td>
            @Html.TextBoxFor(model => model.PhoneExt)
            @Html.ValidationMessageFor(model => model.PhoneExt)
        </td>
    </tr>
    <tr style="display:none">
        <td>
            @Html.LabelFor(model => model.Fax):
        </td>
        <td>
            @Html.TextBoxFor(model => model.Fax)
            @Html.ValidationMessageFor(model => model.Fax)
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(model => model.Website):
        </td>
        <td>
            @Html.TextBoxFor(model => model.Website)
        </td>
    </tr>
    <tr>
        <td>
            <label>Tên nhóm: </label>
        </td>
        <td>
            <div class="dropdown" style="width:80%">
                <input type="text" class="form-control input-sm input-edit dropdown-toggle department-mame" data-toggle="dropdown" name="GroupName" value="@Model.GroupName" />
                <ul class="dropdown-menu listGroupName"></ul>
            </div>
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(model => model.IsMe):
        </td>
        <td>
            @Html.CheckBoxFor(model => model.IsMe)
        </td>
    </tr>
    <tr>
        <td>
            <label>Liên thông qua email</label>:
        </td>
        <td>
            @Html.CheckBoxFor(model => model.IsPublishEmail)
        </td>
    </tr>
    <tr class="hidden">
        <td>
            @Html.LabelFor(model => model.IgnoreExistMe):
        </td>
        <td>            
            @Html.CheckBoxFor(model => model.IgnoreExistMe)
        </td>
    </tr>
    <tr>
        <td style="width:21%;">
            Đơn vị thực thuộc
        </td>
        <td>
            @*<input id="UserReceiveHSMCTxt" class="form-control" placeholder="Gõ account cán bộ tiếp nhận hồ sơ trực tuyến: online, liên thông,..." />*@
        </td>
    </tr>
    @if (Model.AddressId != 0)
    {
        <tr>
            <td colspan="2">
                <div>
                    <table id="AccountHSMC" class="table table-detail" style="">
                        <colgroup>
                            <col style="width:21%" />
                            <col style="" />
                            <col style="width:120px" />
                        </colgroup>
                        <thead>
                            <tr>
                                <th>Mã định danh</th>
                                <th>Cơ quan</th>
                                <th>Chức năng</th>
                            </tr>
                        </thead>
                        <tbody id="listAccountHSMC" class="listAccount"></tbody>
                        <thead>
                            <tr>
                                <td colspan="4">
                                    <button type="button" class="btn btn-success btn-sm" data-toggle="modal" id="createAddress">Tạo mới</button>

                                    <!-- Modal -->
                                    <div id="AddAddress" class="modal fade" role="dialog">
                                        <div class="modal-dialog">
                                            <!-- Modal content-->
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                                    <h4 class="modal-title">Thêm cơ quan trực thuộc</h4>
                                                </div>
                                                <div class="modal-body">

                                                </div>
                                                <div class="modal-footer">
                                                    <label id="error" style="display:none"> </label>
                                                    <button type="button" class="btn btn-success" id="saveAddress">Thêm mới</button>
                                                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        </thead>
                    </table>
                </div>
            </td>

        </tr>
    }

</table>


<script type="text/javascript">
    var address =  @(string.IsNullOrEmpty(address) ? MvcHtmlString.Create("[]") : Html.Raw(address));
    var allUsers =  @(string.IsNullOrEmpty(allUsers) ? MvcHtmlString.Create("[]") : Html.Raw(allUsers));
    var allGroupName =  @(string.IsNullOrEmpty(allGroupName) ? MvcHtmlString.Create("[]") : Html.Raw(allGroupName));
    var allDepartments = @(string.IsNullOrEmpty(allDepartments) ? MvcHtmlString.Create("[]") : Html.Raw(allDepartments));
    var allChildren = @(string.IsNullOrEmpty(allChildren) ? MvcHtmlString.Create("[]") : Html.Raw(allChildren));
</script>
<script>
    function renderGroupName() {
        var $ulDropdown = $(".listGroupName");
        $ulDropdown.html("");
        for (var i = 0; i < allGroupName.length; i++) {
            if (allGroupName[i] != null) {
                var li = '<li><a href="#">'+allGroupName[i]+'</a></li>';
                $ulDropdown.append(li);
            }
        }

        $ulDropdown.find("li").click(function (e) {
            var target =  $(e.target).closest("li");
            var name = target.text();
            var inputGroup = target.parent().parent().find("input");
            var nameGroups = inputGroup.val()
            if (nameGroups.indexOf(name) > -1) {
                return;
            }
            if (nameGroups.trim() == "") {
                inputGroup.val(name);
                return;
            }
            inputGroup.val( nameGroups  +" ; "+ name);
        })
    }
    $(document).ready(function () {
        renderGroupName();
        var selectorHSMC = {
            app: "#AccountHSMC",
            autocomplete:"#UserReceiveHSMCTxt",
            result:"#UserReceiveHsmc",
            status: "up"
        }
        var fnUserReviceHSMC = renderUserRevice(allChildren, selectorHSMC);
        var userReviceHSMC = new fnUserReviceHSMC();
    });

    function renderUserRevice (listUser, selector) {
        "use strict";
        if (address.AddressId == 0) {
            return;
        }
        //#region Relation View
        var AddressModel = Backbone.Model.extend({
            defaults: function () {
                return {
                    "AddressId": 0,
                    "Name": "",
                    "AddressString": null,
                    "Email": null,
                    "Phone": null,
                    "PhoneExt": null,
                    "Fax": null,
                    "EdocId": "",
                    "Website": address.Website,
                    "IsMe": false,
                    "IgnoreExistMe": address.IgnoreExistMe,
                    "GroupName": address.GroupName,
                    "ParentId": address.AddressId,
                    "ParentIdName":address.Name,
                    "IsCreate": false
                };
            },
        });

        var ListAddress = Backbone.Collection.extend({
            model: AddressModel
        });

        var Address = Backbone.View.extend({
            el:selector.app,

            events: {
                "click #createAddress": "create",
                "click #saveAddress": "createItem",

            },

            ListAddress: new ListAddress(),

            initialize: function (options) {
                this.listenTo(this.ListAddress, 'add', this.addUserReceiveItem);
                //this.listenTo(this.ListAddress, 'reset', this.resetVote);
                this.$el.find(".listAccount").html("");
                var that = this;

                that.render();

                return that;
            },

            render: function () {
                var that = this;
                for (var i = 0; i < listUser.length; i++) {
                    var userRevice = new AddressModel(listUser[i]);
                    that.ListAddress.add(userRevice);
                }
                return this;
            },

            create: function () {
                var that = this;
                var addressModel = new AddressModel();
                addressModel.set({IsCreate: true})
                $("#AddAddress").find(".modal-body").html($.tmpl($("#ItemModal"), addressModel.toJSON()));
                $("#AddAddress").modal("show");
                this.ListAddress.add(addressModel);
            },

            createItem: function () {
                var that = this;
                var name = $("#AddAddress").find(".modal-body").find("input[name=Name]").val()
                var EdocId = $("#AddAddress").find(".modal-body").find("input[name=EdocId]").val();
                var addressModel = that.ListAddress.find({IsCreate : true})
                addressModel.set({Name: name, EdocId: EdocId});
                $.ajax({
                    method: "Post",
                    url: "/Admin/Address/CreateChild",
                    data: addressModel.toJSON(),
                    success: function (data) {
                        if (data.status) {
                            addressModel.set({IsCreate : false, AddressId: data.data.AddressId });
                            $("#AddAddress").modal("hide");
                        }else{
                            $("#error").text(data.message);
                            $("#error").show();
                        }
                    }
                })
            },

            addUserReceiveItem: function (model) {
                var that = this;
                var view = new UserReceiveItem({
                    model: model,
                    collection :  that.ListAddress
                });
                that.$el.find(".listAccount").append(view.render().el);
            }
        });

        var UserReceiveItem = Backbone.View.extend({
            tagName: 'tr',

            events: {
                'click .edit-user-revice': 'edit',
                'click .saveAddress': 'editSuccess',
                'click .delete-user-revice':'deleteUser'
            },

            initialize: function (option) {
                this.collection = option.collection;
                this.listenTo(this.model, 'change', this.render);
                this.render();
            },

            render: function () {
                this.$el.empty();
                var that = this;
                that.$el.html($.tmpl($("#ItemUser"), that.model.toJSON()));
                if (that.model.get("IsEdit")) {
                    var $ulDropdown = that.$el.find(".listDepartment");
                    $ulDropdown.html("");
                    $ulDropdown.addClass(selector.status);
                    for (var i = 0; i < allDepartments.length; i++) {
                        var li = '<li><a href="#">'+allDepartments[i].label+'</a></li>';
                        $ulDropdown.append(li);
                    }

                    $ulDropdown.find("li").click(function (e) {
                        var target =  $(e.target).closest("li");
                        var name = target.text();
                        target.parent().parent().find("input").val(name);
                    })
                }
                return this;
            },

            edit: function (e) {
                e.preventDefault();
                var that =  this;
                that.$el.find(".modal-body").html($.tmpl($("#ItemModal"), that.model.toJSON()));
                that.$el.find(".modal").modal("show");
            },

            deleteUser: function () {
                var that = this;
                $.ajax({
                    method: "Post",
                    url: "/Admin/Address/DeleteChild",
                    data: {id:Number(that.model.get("AddressId"))},
                    success: function (data) {
                        if (data.status) {
                            that.model.destroy({
                                success : _.bind(function(model, response) {
                                    that.$el.remove();
                                }, this)
                            });
                        }else{
                            $("#error").text(data);
                            $("#error").show();
                        }
                    }
                })
            },

            cancel: function () {
                this.model.set({IsEdit: false});
            },

            editSuccess: function () {
                var that = this;
                var name = that.$el.find(".modal-body").find("input[name=Name]").val()
                var EdocId = that.$el.find(".modal-body").find("input[name=EdocId]").val();
                that.model.set({Name: name, EdocId: EdocId});
                $.ajax({
                    method: "Post",
                    url: "/Admin/Address/CreateChild",
                    data: that.model.toJSON(),
                    success: function (data) {
                        if (data.status) {
                            that.model.set({IsCreate : false, AddressId: data.data.AddressId });
                            that.$el.find(".modal").modal("hide");
                            $(".modal-backdrop.fade.in").remove();
                        }else{
                            $("#error").text(data.message);
                            $("#error").show();
                        }
                    }
                })
            }
        });

        //#endregion
        return Address;
    }

</script>
<script id="ItemUser" type="text/html">
    <td>${EdocId}</td>
    <td>${Name}</td>
    <td>
        <a href="#">
            <span class="edit-user-revice" style="margin-right: 5px">Sửa</span>
            <span class="delete-user-revice" style="color:red">Xóa</span>
        </a>
        <div id="" class="modal fade" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Cơ quan trực thuộc</h4>
                    </div>
                    <div class="modal-body">

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-info saveAddress" id="">Sửa</button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </td>
</script>

<script id="ItemModal" type="text/html">
    <form>
        <div class="form-horizontal">
            <div class="form-group">
                <label class="control-label col-sm-5" for="ParentIdName">Cơ quan gốc:</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" id="ParentIdName" placeholder="" readonly style="width:100%" value="${ParentIdName}">
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-5" for="EdocId">Mã định danh <span class="">*</span>: </label>
                <div class="col-sm-10">
                    <input type="text" name="EdocId" class="form-control" id="EdocId" placeholder="" style="width:100%" value="${EdocId}">
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-5" for="Name">Tên cơ quan <span class="">*</span>:</label>
                <div class="col-sm-10">
                    <input type="text" name="Name" class="form-control" id="Name" placeholder="" style="width:100%" value="${Name}">
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-5" for="Website">Website:</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" readonly id="Website" placeholder="" style="width:100%" value="${Website}">
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-5" for="GroupName">Nhóm địa chỉ:</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" readonly id="GroupName" placeholder="" style="width:100%" value="${GroupName}">
                </div>
            </div>
        </div>
    </form>
</script>
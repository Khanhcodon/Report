@model InterfaceConfigModel
@Html.HiddenFor(model => model.InterfaceConfigId)
@Html.ValidationSummary(true)

<table>
    <tr>
        <td style="width:15%">
            @Html.EgovLabelFor(model => model.InterfaceConfigName):
        </td>
        <td>
            @Html.TextAreaFor(model => model.InterfaceConfigName, new Dictionary<string, object>() {
                                                    { "class", "egovQtip" },
                                                    { "data-qtip", ".tooltipPacket" } })
            @if (Model.InterfaceConfigId == 0)
            { 
                <div>
                    <p>@Html.Raw(Localizer("Admin.Common.CreatePacket"))</p>
                </div>
            }
            @Html.ValidationMessageFor(model => model.InterfaceConfigName)
        </td>
    </tr>
    <tr>
        <td>
            @Html.LabelFor(model => model.Description):
        </td>
        <td>
            @Html.TextAreaFor(model => model.Description)
            @Html.ValidationMessageFor(model => model.Description)
        </td>
    </tr>
</table>
@if (Model.InterfaceConfigId > 0)
{     
    <script src="@Url.Content("~/Scripts/bkav.egov/libs/jquery/jquery.fileupload/js/vendor/jquery.ui.widget.js")"></script>
    <script src="@Url.Content("~/Scripts/bkav.egov/libs/jquery/jquery.fileupload/js/jquery.fileupload.min.js")"></script>
    <script src="@Url.Content("~/Scripts/bkav.egov/libs/jquery/jquery.fileupload/js/jquery.iframe-transport.js")"></script>
    <script src="@Url.Content("~/Scripts/bkav.egov/libs/jquery.fileDownload.js")"></script>
    
    @Html.Partial("_Config")
    <br />
    
    <h3>@Localizer("Bkav.eGovCloud.Areas.Admin.InterfaceConfig.ConfigTemplate") </h3>
    <div>
        <button type="button" class="btn" onclick="openConfigTemplate(@Model.InterfaceConfigId)">
            @Localizer("Bkav.eGovCloud.Areas.Admin.InterfaceConfig.Config")
        </button>
    </div>
     <h3>@Localizer("Bkav.eGovCloud.Areas.Admin.InterfaceConfig.ExtportOrImportFromFile") </h3>
            <div>
                <button type="button" class="btn" onclick="exportJsonToFile(@Model.InterfaceConfigId)">
                    @Localizer("Bkav.eGovCloud.Areas.Admin.InterfaceConfig.ExportToFile")
                </button>

                <input class="btn" type="button" value="@Localizer("Bkav.eGovCloud.Areas.Admin.InterfaceConfig.UploadFile") (*.json, *.txt)" onclick="$('#upload').click()" />
                <input class="btn" type="file" name="files" id="upload" style="display: none;"
                     data-url="@Url.Action("UpdateJson", "InterfaceConfig", new { Id = Model.InterfaceConfigId })" accept="*.txt,*.json" />
            </div>            
         
            <script>
                $('#upload').fileupload({
                    dataType: 'json',
                    url: $(this).attr('data-url'),
                    autoUpload: true,
                    add: function (e, data) {
                        var filename = data.files[0].name;
                        if (filename.indexOf(".txt", filename - ".txt".length) !== -1
                            || filename.indexOf(".json", filename - ".json".length) !== -1) {
                            data.submit();
                        } else {
                            eGovMessage.show("@Localizer("Bkav.eGovCloud.Areas.Admin.InterfaceConfig.Extension")", "", eGovMessage.messageButtons.Ok);
                        }
                    },
                    done: function (e, data) {
                        var result = data.result;
                        if (result.success) {
                            eGovMessage.notification(result.success, eGovMessage.messageTypes.success);
                        }
                        else {
                            eGovMessage.notification(result.error, eGovMessage.messageTypes.error);
                        }
                    }
                });

                function exportJsonToFile(id) {
                    var link = '@Url.Action("ExportJsonToFile", "InterfaceConfig")';
                    $.fileDownload(link,
                        {
                            data: { id: id },
                            failCallback: function (response) {
                                var html = $(response);
                                try {
                                    var json = JSON.parse(html.text());
                                    alert(json.error);
                                } catch (e) {
                                    alert('"@Localizer("Common.Error.DownloadFile")"');
                                }
                            }
                        });
                    }

            </script>  
}